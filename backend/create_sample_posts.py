#!/usr/bin/env python3
"""샘플 게시글 생성 스크립트"""

import sys
import os
from datetime import datetime, timedelta
import random

# 프로젝트 루트 경로 추가
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy.orm import Session
from app.db.database import SessionLocal
from app.models.post import Post, Category
from app.models.user import User

# 샘플 데이터
SAMPLE_POSTS = {
    "notice": [
        {
            "title": "🎉 Russian.Town 커뮤니티 오픈!",
            "content": """안녕하세요! Russian.Town 커뮤니티가 정식 오픈했습니다.

한국과 러시아를 연결하는 커뮤니티로, 다양한 정보를 공유하고 소통할 수 있습니다.

주요 기능:
- 자동 번역 기능 (한국어 ↔ 러시아어)
- 게시판 (공지, 자유게시판, 생활정보, 행정정보, 구인구직, 벼룩시장)
- 비즈니스 파트너 정보

많은 이용 부탁드립니다!""",
            "translated_title_ru": "🎉 Открытие Russian.Town!",
            "translated_content_ru": """Здравствуйте! Сообщество Russian.Town официально открыто.

Это сообщество, объединяющее Корею и Россию, где вы можете делиться различной информацией и общаться.

Основные функции:
- Автоматический перевод (корейский ↔ русский)
- Доски объявлений (объявления, свободное общение, жизнь в Корее, административная информация, работа, барахолка)
- Информация о бизнес-партнерах

Просим вас активно пользоваться!"""
        },
        {
            "title": "📋 커뮤니티 이용 규칙 안내",
            "content": """커뮤니티 이용 규칙을 안내드립니다.

1. 타인을 존중하는 언어를 사용해주세요
2. 상업적 광고는 제한됩니다
3. 불법적인 내용은 금지됩니다
4. 개인정보 보호에 유의해주세요

규칙을 위반할 경우 경고 또는 이용 정지될 수 있습니다.""",
            "translated_title_ru": "📋 Правила использования сообщества",
            "translated_content_ru": """Ознакомьтесь с правилами использования сообщества.

1. Используйте уважительный язык
2. Коммерческая реклама ограничена
3. Незаконный контент запрещен
4. Будьте внимательны к защите личной информации

Нарушение правил может привести к предупреждению или блокировке."""
        },
        {
            "title": "💡 자동 번역 기능 추가 안내",
            "content": """자동 번역 기능이 추가되었습니다!

이제 한국어로 작성하면 자동으로 러시아어로 번역되고,
러시아어로 작성하면 자동으로 한국어로 번역됩니다.

DeepL API를 사용하여 고품질 번역을 제공합니다.""",
            "translated_title_ru": "💡 Добавлена функция автоперевода",
            "translated_content_ru": """Добавлена функция автоматического перевода!

Теперь при написании на корейском автоматически переводится на русский,
а при написании на русском автоматически переводится на корейский.

Используется DeepL API для предоставления высококачественного перевода."""
        }
    ],
    "free": [
        {
            "title": "이태원에서 보르쉬 먹을 수 있는 곳 추천!",
            "content": """이태원에 있는 러시아 레스토랑 '모스크바'를 추천합니다.

보르쉬가 정말 맛있고 분위기도 좋아요.
가격은 좀 있지만 그만한 가치가 있습니다!

주소: 서울 용산구 이태원로 200
영업시간: 11:00 - 22:00""",
            "translated_title_ru": "Где поесть борщ в Итэвоне!",
            "translated_content_ru": """Рекомендую русский ресторан 'Москва' в Итэвоне.

Борщ очень вкусный и атмосфера хорошая.
Цены немного высокие, но оно того стоит!

Адрес: Itaewon-ro 200, Yongsan-gu, Seoul
Часы работы: 11:00 - 22:00"""
        },
        {
            "title": "주말에 축구하실 분 계신가요?",
            "content": """매주 토요일 오후 2시에 잠실에서 축구 모임을 하고 있습니다.

러시아 분들 환영합니다!
레벨은 상관없고 재미있게 운동하는 게 목적입니다.

참여하고 싶으신 분은 댓글 남겨주세요.""",
            "translated_title_ru": "Кто играет в футбол на выходных?",
            "translated_content_ru": """Каждую субботу в 14:00 играем в футбол в Чамсиле.

Приглашаем россиян!
Уровень не важен, главное - весело провести время.

Кто хочет присоединиться, оставьте комментарий."""
        }
    ],
    "market": [
        {
            "title": "[판매] 삼성 냉장고 거의 새것 (15만원)",
            "content": """삼성 냉장고 판매합니다.

- 모델: 삼성 RS63R5571M9
- 구매일: 2023년 10월
- 상태: 거의 새것
- 가격: 150,000원 (네고 가능)
- 지역: 서울 강남구

귀국 예정이라 급매합니다.
연락주세요!""",
            "translated_title_ru": "[Продам] Холодильник Samsung - 150К ₩",
            "translated_content_ru": """Продаю холодильник Samsung.

- Модель: Samsung RS63R5571M9
- Дата покупки: октябрь 2023
- Состояние: почти новый
- Цена: 150,000 вон (торг возможен)
- Район: Каннам-гу, Сеул

Срочная продажа из-за отъезда.
Свяжитесь со мной!"""
        },
        {
            "title": "[나눔] 러시아 소설책 50권 무료나눔",
            "content": """러시아 소설책 50권 무료로 나눔합니다.

도스토예프스키, 톨스토이, 체홉 등
다양한 작가의 책이 있습니다.

서울 신촌에서 직거래 가능합니다.
관심 있으신 분 연락주세요!""",
            "translated_title_ru": "[Отдам] 50 русских книг бесплатно",
            "translated_content_ru": """Отдаю бесплатно 50 русских книг.

Достоевский, Толстой, Чехов и другие
авторы.

Можно забрать в Синчоне, Сеул.
Кому интересно, свяжитесь!"""
        }
    ],
    "job": [
        {
            "title": "[구인] IT 스타트업 러시아어 가능자 (월 400만원)",
            "content": """IT 스타트업에서 러시아어 가능자를 구합니다.

- 직무: 해외사업 담당
- 자격: 러시아어 능통, 한국어 가능
- 급여: 월 400만원 (협의 가능)
- 위치: 서울 강남구 테헤란로
- 고용형태: 정규직

이력서는 이메일로 보내주세요.""",
            "translated_title_ru": "[Вакансия] IT стартап - 4 млн ₩/мес",
            "translated_content_ru": """IT стартап ищет сотрудника со знанием русского языка.

- Должность: менеджер по международным продажам
- Требования: свободный русский, корейский язык
- Зарплата: 4 млн вон/месяц (обсуждаемо)
- Место: Теheран-ро, Каннам-гу, Сеул
- Тип занятости: постоянная

Резюме отправляйте на email."""
        },
        {
            "title": "[구직] 한러 통번역 가능합니다 (경력 5년)",
            "content": """한러 통번역 프리랜서 구직합니다.

- 경력: 5년 (의료, 법률, 비즈니스)
- 자격: TORFL 4급, 한국어 원어민
- 가능 분야: 동시통역, 순차통역, 문서번역
- 희망 지역: 서울/경기
- 시급: 협의 가능

연락주세요!""",
            "translated_title_ru": "[Ищу работу] Переводчик корейский-русский (5 лет)",
            "translated_content_ru": """Ищу работу переводчика корейский-русский (фриланс).

- Опыт: 5 лет (медицина, юриспруденция, бизнес)
- Квалификация: TORFL 4, носитель корейского
- Специализация: синхронный, последовательный перевод, документы
- Место: Сеул/Кёнгидо
- Ставка: обсуждаемо

Свяжитесь со мной!"""
        },
        {
            "title": "[구인] 무역회사 해외영업 담당자 모집",
            "content": """한러 무역회사에서 영업담당자를 모집합니다.

- 업무: 러시아 바이어 발굴, 수출입 업무
- 우대: 무역 실무 경험자
- 급여: 연봉 3500-4500만원
- 복리후생: 4대보험, 퇴직금, 연차
- 근무지: 서울 영등포구

지원: hr@tradeko.com""",
            "translated_title_ru": "[Вакансия] Менеджер по экспорту",
            "translated_content_ru": """Торговая компания набирает менеджера по продажам.

- Обязанности: поиск российских покупателей, экспорт-импорт
- Предпочтение: опыт торговых операций
- Зарплата: 35-45 млн вон/год
- Льготы: 4 страховки, пенсия, отпуск
- Место: Ёндынпо-гу, Сеул

Отправить резюме: hr@tradeko.com"""
        }
    ],
    "qna": [
        {
            "title": "외국인등록증 재발급 어떻게 하나요?",
            "content": """외국인등록증을 분실했는데 재발급 절차가 어떻게 되나요?

필요한 서류와 비용이 궁금합니다.
경험 있으신 분 조언 부탁드립니다!""",
            "translated_title_ru": "Как переоформить карту иностранца?",
            "translated_content_ru": """Потерял карту иностранца, как восстановить?

Интересуют необходимые документы и стоимость.
Помогите советом, кто проходил через это!"""
        },
        {
            "title": "한국에서 러시아 운전면허증 사용 가능한가요?",
            "content": """러시아 운전면허증을 한국에서 바로 사용할 수 있나요?
아니면 변경해야 하나요?

절차가 복잡한가요?""",
            "translated_title_ru": "Можно ли использовать российские права в Корее?",
            "translated_content_ru": """Можно ли использовать российские водительские права в Корее напрямую?
Или нужно менять?

Процедура сложная?"""
        },
        {
            "title": "인천공항에서 서울 시내 가는 가장 저렴한 방법은?",
            "content": """인천공항에서 서울역까지 가려고 합니다.

택시, 버스, 지하철 중 가장 저렴하고 편한 방법이 뭔가요?
짐이 좀 많은 편입니다.""",
            "translated_title_ru": "Самый дешевый способ из Инчхона в Сеул?",
            "translated_content_ru": """Нужно добраться из аэропорта Инчхон до станции Сеул.

Что дешевле и удобнее: такси, автобус или метро?
У меня много багажа."""
        }
    ]
}

def create_sample_posts():
    """샘플 게시글 생성"""
    db = SessionLocal()
    try:
        # 기존 사용자 가져오기 (첫 번째 사용자 사용)
        user = db.query(User).first()
        if not user:
            print("사용자가 없습니다. 먼저 사용자를 생성해주세요.")
            return

        print(f"사용자 '{user.email}'로 게시글을 생성합니다.")

        # 카테고리 매핑
        category_mapping = {
            "notice": "notice",
            "free": "free",
            "market": "market",
            "job": "job",
            "qna": "qna"
        }

        post_count = 0

        for category_key, posts in SAMPLE_POSTS.items():
            # 카테고리 조회
            category_slug = category_mapping.get(category_key)
            if not category_slug:
                continue

            category = db.query(Category).filter(Category.slug == category_slug).first()
            if not category:
                print(f"카테고리를 찾을 수 없습니다: {category_slug}")
                continue

            # 게시글 생성
            for i, post_data in enumerate(posts):
                # 이미 존재하는지 확인
                existing_post = db.query(Post).filter(
                    Post.title == post_data["title"],
                    Post.category_id == category.id
                ).first()

                if existing_post:
                    print(f"이미 존재하는 게시글: {post_data['title']}")
                    continue

                # 날짜 계산 (최근 게시글처럼 보이도록)
                created_at = datetime.now() - timedelta(hours=random.randint(1, 72))

                post = Post(
                    title=post_data["title"],
                    content=post_data["content"],
                    translated_title_ko=post_data["title"],
                    translated_content_ko=post_data["content"],
                    translated_title_ru=post_data.get("translated_title_ru"),
                    translated_content_ru=post_data.get("translated_content_ru"),
                    category_id=category.id,
                    user_id=user.id,
                    source_lang="ko",
                    auto_translated=True,
                    status="PUBLISHED",
                    view_count=random.randint(10, 100),
                    like_count=random.randint(0, 20),
                    comment_count=0,
                    share_count=0,
                    created_at=created_at,
                    updated_at=created_at
                )

                db.add(post)
                post_count += 1
                print(f"게시글 생성: {post_data['title']}")

        db.commit()
        print(f"\n총 {post_count}개의 샘플 게시글이 생성되었습니다.")

    except Exception as e:
        print(f"에러 발생: {e}")
        db.rollback()
    finally:
        db.close()

if __name__ == "__main__":
    print("샘플 게시글 생성을 시작합니다...")
    create_sample_posts()
    print("완료!")
